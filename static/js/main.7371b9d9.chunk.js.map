{"version":3,"sources":["components/ChatRoom.js","App.js","serviceWorker.js","index.js"],"names":["ChatRoom","props","dummy","useRef","messagesRef","firestore","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","auth","currentUser","uid","photoURL","add","text","createdAt","firebase","FieldValue","serverTimestamp","map","msg","ChatMessage","key","id","message","ref","onSubmit","value","onChange","target","placeholder","type","disabled","messageClass","avatar","className","src","alt","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","catch","err","console","log","SignOut","signOut","App","useAuthState","hasLoggedIn","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error"],"mappings":"0RAiDeA,MA9Cf,SAAkBC,GAChB,IAAMC,EAAQC,mBACRC,EAAcH,EAAMI,UAAUC,WAAW,YACzCC,EAAQH,EAAYI,QAAQ,aAAaC,MAAM,IAH9B,EAKJC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EALgB,sBAMWC,mBAAS,IANpB,mBAMhBC,EANgB,KAMLC,EANK,KAQjBC,EAAW,uCAAG,WAAMC,GAAN,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAGQlB,EAAMmB,KAAKC,YAA7BC,EAHU,EAGVA,IAAKC,EAHK,EAGLA,SAHK,SAKZnB,EAAYoB,IAAI,CACpBC,KAAMX,EACNY,UAAWzB,EAAM0B,SAAStB,UAAUuB,WAAWC,kBAC/CP,MACAC,aATgB,OAYlBR,EAAa,IAZK,2CAAH,sDAejB,OACE,oCACE,8BACGH,GACCA,EAASkB,KAAI,SAAAC,GAAG,OACd,kBAACC,EAAD,CAAaZ,KAAMnB,EAAMmB,KAAMa,IAAKF,EAAIG,GAAIC,QAASJ,OAEzD,0BAAMK,IAAKlC,KAEb,0BAAMmC,SAAUrB,GACd,2BACEsB,MAAOxB,EACPyB,SAAU,SAAAtB,GAAC,OAAIF,EAAaE,EAAEuB,OAAOF,QACrCG,YAAY,mBAEd,4BAAQC,KAAK,SAASC,SAAwB,KAAd7B,GAAhC,WAUR,SAASkB,EAAY/B,GAAQ,IAAD,EACMA,EAAMkC,QAA9BV,EADkB,EAClBA,KAAMH,EADY,EACZA,IAAKC,EADO,EACPA,SACbqB,EAAetB,IAAQrB,EAAMmB,KAAKC,YAAYC,IAAM,OAAS,WAC7DuB,EACJtB,GAAY,wDAEd,OACE,yBAAKuB,UAAS,kBAAaF,IACzB,yBAAKG,IAAKF,EAAQG,IAAI,WACtB,2BAAIvB,I,wCCpDVE,IAASsB,cAAc,CACrBC,OAAQ,0CACRC,WAAY,mCACZC,YACE,6EACFC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,8CAGT,IAAMpC,EAAOO,IAASP,OAChBf,EAAYsB,IAAStB,YAqB3B,SAASoD,IAQP,OACE,gCACE,iDACA,4BAAQX,UAAU,UAAUY,QAVP,WACvB,IAAMC,EAAW,IAAIhC,IAASP,KAAKwC,mBACnCxC,EAAKyC,gBAAgBF,GAAUG,OAAM,SAACC,GACpCC,QAAQC,IAAI,0BAA2BF,QAOvC,uBAGA,2EAKN,SAASG,IACP,OACE9C,EAAKC,aACH,4BAAQyB,UAAU,WAAWY,QAAS,kBAAMtC,EAAK+C,YAAjD,YAOSC,MAhDf,WAAgB,IAAD,EACSC,YAAajD,GAA5BkD,EADM,oBAEb,OACE,yBAAKxB,UAAU,OACb,gCACE,qEACA,kBAACoB,EAAD,OAEF,iCACGI,EACC,kBAAC,EAAD,CAAU3C,SAAUA,IAAUP,KAAMA,EAAMf,UAAWA,IAErD,kBAACoD,EAAD,SCtBUc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdxB,OAAM,SAAAyB,GACLvB,QAAQuB,MAAMA,EAAMpD,c","file":"static/js/main.7371b9d9.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\n\nfunction ChatRoom(props) {\n  const dummy = useRef();\n  const messagesRef = props.firestore.collection(\"messages\");\n  const query = messagesRef.orderBy(\"createdAt\").limit(25);\n\n  const [messages] = useCollectionData(query, { idField: \"id\" });\n  const [formValue, setFormValue] = useState(\"\");\n\n  const sendMessage = async e => {\n    e.preventDefault();\n\n    const { uid, photoURL } = props.auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: props.firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    });\n\n    setFormValue(\"\");\n  };\n\n  return (\n    <>\n      <main>\n        {messages &&\n          messages.map(msg => (\n            <ChatMessage auth={props.auth} key={msg.id} message={msg} />\n          ))}\n        <span ref={dummy}></span>\n      </main>\n      <form onSubmit={sendMessage}>\n        <input\n          value={formValue}\n          onChange={e => setFormValue(e.target.value)}\n          placeholder=\"Type a message\"\n        />\n        <button type=\"submit\" disabled={formValue === \"\"}>\n          Send\n        </button>\n      </form>\n    </>\n  );\n}\n\nexport default ChatRoom;\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n  const messageClass = uid === props.auth.currentUser.uid ? \"sent\" : \"received\";\n  const avatar =\n    photoURL || \"https://api.adorable.io/avatars/23/abott@adorable.png\";\n\n  return (\n    <div className={`message ${messageClass}`}>\n      <img src={avatar} alt=\"avatar\" />\n      <p>{text}</p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport ChatRoom from \"./components/ChatRoom\";\nimport firebase from \"firebase/app\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyBHlMbSz_nPU28iII28ymDb6U7nTz_yJEo\",\n  authDomain: \"anonyspace-1b5ff.firebaseapp.com\",\n  databaseURL:\n    \"https://anonyspace-1b5ff-default-rtdb.asia-southeast1.firebasedatabase.app\",\n  projectId: \"anonyspace-1b5ff\",\n  storageBucket: \"anonyspace-1b5ff.appspot.com\",\n  messagingSenderId: \"357161899322\",\n  appId: \"1:357161899322:web:c75a6d10add2f5448c6c03\",\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n  const [hasLoggedIn] = useAuthState(auth);\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Welcome to the chat room ðŸ’¬</h1>\n        <SignOut />\n      </header>\n      <section>\n        {hasLoggedIn ? (\n          <ChatRoom firebase={firebase} auth={auth} firestore={firestore} />\n        ) : (\n          <SignIn />\n        )}\n      </section>\n    </div>\n  );\n}\n\nfunction SignIn() {\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider).catch((err) => {\n      console.log(\"signInWithGoogle -> err\", err);\n    });\n  };\n\n  return (\n    <center>\n      <h1>Minimal Chat Room</h1>\n      <button className=\"sign-in\" onClick={signInWithGoogle}>\n        Sign in with Google\n      </button>\n      <p>Please log in to continue to the chat-room.</p>\n    </center>\n  );\n}\n\nfunction SignOut() {\n  return (\n    auth.currentUser && (\n      <button className=\"sign-out\" onClick={() => auth.signOut()}>\n        Sign Out\n      </button>\n    )\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}